{"title":"Simulating Raman Fiber Amplifiers in Julia: From Theory to High-Performance Code","markdown":{"yaml":{"title":"Simulating Raman Fiber Amplifiers in Julia: From Theory to High-Performance Code","author":"Sarthak Dash","date":"2025-08-09","categories":["Raman","Julia"],"image":"image.jpg","code-annotations":"hover","bibliography":"references.bib","highlight-style":"monokai","engine":"julia","execute":{"freeze":true}},"headingText":"üöÄ What You‚Äôll Learn in This Post","containsRefs":false,"markdown":"\n\n\n-   A quick primer on **Raman fiber amplifiers** and their role in modern **optical communication systems**.\n-   The **physics and equations** behind **Raman gain** and **signal-pump interactions**.\n-   How to **simulate Raman amplifiers** using **Julia programming language** for **high-performance computing**.\n-   Techniques to **optimize Julia code** using **StaticArrays**, **in-place operations**, and **memory-efficient design**.\n-   Visual plot of **power evolution** along the fiber length.\n-   Benchmarking results comparing **Julia vs Python** for scientific simulations.\n-   Access to **Julia code snippets**, explanations, and performance tips for hands-on learning.\n\n## ü§î What is Raman fiber amplifier, and why simulate it?\n\nA **Raman fiber amplifier (RFA)** uses the Raman scattering effect to amplify optical signals directly within the transmission fiber itself. Unlike traditional fiber amplifiers that require special dopants in optical fiber, Raman scattering can turn any ordinary optical fiber into an amplifier, making RFAs incredibly versatile for telecommunications systems.\n\nHere are some of the points why RFAs are revolutionary:\n\n-   **Wavelength flexibility**: Raman amplification can be done at any wavelength and in any conventional optical fiber.\n-   **Broad bandwidth**: Leads to amplification of large range of wavelengths, essential for dense wavelength division multiplexing (WDM) systems\n-   **Distributed amplification**: The entire fiber becomes the gain medium, providing amplification along the transmission path\n\nRFAs are now commonly used in long-haul communication systems that are designed to operate over thousands of kilometers. Simulating these RFAs is crucial, as complex nonlinear interactions between pump and signal beams makes analytical solutions impossible for a practical situation. By modeling the coupled ordinary differential equations (ODE) that govern Raman amplification, we can optimize several aspects of the amplifier design such as pump parameters, fiber lengths, and design systems before performing an expensive experimental validation. Also simulation provides us a handy tool to understand the workings of a system by varying only the desired parameter, which is not possible in a practical system. Now let's discuss why Julia programming language is a good choice to do the simulation.\n\n## ü§∑‚Äç‚ôÇÔ∏è Why Julia?\n\nJulia is uniquely positioned for scientific simulations like RFAs. Here are some of the reasons:\n\n-   **Performance**: With Julia, one can achieve C-like speeds while having Python-like readability. For iterative ODE solving required in RFA simulations, this can lead to dramatically faster computation times‚Äîoften 10-100x faster than Python\n-   **Simplicity**: The syntax is intuitive for scientists and engineers. For example, one can write `dP‚Çö = gR*P‚Çö*P‚Çõ - Œ±‚Çõ*P‚Çõ` and it looks exactly like the mathematical equation\n-   **Rich Ecosystem**: [DifferentialEquations.jl](https://docs.sciml.ai/DiffEqDocs/stable/) is, IMO, the most sophisticated ODE solver suite in any language, with over 200 methods for solving variety of differential equations, with a focus on speed and flexibility\n-   **Scientific Focus**: Julia was designed from the ground up for numerical and scientific computing. It handles the \"two-language problem\" where one develop the prototype in a high-level language (eg: Python, MATLAB) but implement the main computation in a low-level language for performance (C, FORTRAN).\n\n## üìò Basic theory Refresher\n\nNow before we dive deeper into writing the codes, lets discuss the theory a bit.\n\n### Brief overview of Raman amplification\n\nWhen light interacts with molecular vibrations in glass, there can be transfer of energy between different wavelengths. This is known as **Raman scattering**. Imagine a high energy photon (pump) that collide with vibrating fiber molecules (phonons), giving up some of their energy becoming a lower energy photon (Stokes) at lower frequency or longer wavelength (The pump photons can also receive energy from phonons leading to higher frequency anti-Stokes photons, but this is usually a weak process at room temperatures). If a signal photon is already present at Stokes frequency, it can lead to **stimulated Raman scattering** leading to amplification of the signal wave at Stokes frequency (and thus Raman gain).\n\n### The power-balance equation\n\nThe heart of Raman amplifier simulation lies in two coupled ordinary differential equations (ODEs) that describe how pump and signal (Stokes) powers evolve along the fiber [@agrawal2013; @headley2005] $$\n\\begin{align} \\\\\n&\\mathbf{Signal\\ equation:}\n&\\frac{dP_{s}}{dz}&= g_{R}P_{p}P_{s} - \\alpha_{s}P_{s} \\\\\n&\\mathbf{Pump\\ equation:}\n&\\frac{dP_{p}}{dz}&= -\\frac{\\nu_{p}}{\\nu_{s} }g_{R}P_{p}P_{s} - \\alpha_{p}P_{p}\n\\end{align}\n$$ {#eq-power-balance1} where:\n\n-   $P_{s}$ and $P_{p}$ are signal and pump powers that are a function of position $z$\n-   $g_{R}$ is the Raman gain efficiency\n-   $\\alpha_{s}$ and $\\alpha_{p}$ are signal and pump attenuation coefficients\n-   $\\nu_{s}$ and $\\nu_{p}$ are signal and pump frequencies\n\n![Diagram illustrating the power-balance equation](power%20balance.png){#fig-power-balance .lightbox fig-align=\"center\" width=\"80%\"}\n\nThe $g_{R}P_{p}P_{s}$ term is the power transfer from pump to signal due to stimulated Raman scattering and the term $-\\frac{\\nu_{p}}{\\nu_{s} }g_{R}P_{p}P_{s}$ represents the power loss in the pump as it is transferred to signal. The reason of the $\\nu_{p}/\\nu_{s}$ term is due to photon number conservation (in absence of loss) [@agrawal2013].\n\nThe power-balance equations describes the initial pump and signal power $P_{p}(0)$ and $P_{s}(0)$ evolves along the fiber length $L$.\n\n#### Key assumptions\n\nThe above equations are derived with these assumptions\n\n-   **CW or quasi-CW regime**: both pump and signal assumed to be close to continuous-wave(CW) and so no time dependence is considered, valid assumption in most telecommunications applications.\n-   **Single-mode fiber**: both pump and signal waves are in the fundamental mode of fiber, appropriate for standard telecom fibers\n-   **Co-propagating**: both pump and signal waves travel in the same direction, valid in most cases and simple to begin with simulation compared to the counter-propagating case.\n-   **No dispersion**: the fiber has same mode solutions at both pump and signal waves, an assumption we can easily relax, considered initially only to simplify the simulation.\n\nThe beauty of these equations, under the given assumptions, lies in their simplicity ‚Äî yet they capture the essential physics of energy transfer, amplification, and loss in fiber Raman amplifiers.\n\n## üß™ Performing the Simulation in Julia\n\n### Setting up\n\nFirst, if you don‚Äôt have Julia installed, then download and install [Julia programming language](https://julialang.org/). Follow the [installing Julia](https://julialang.org/install/) instructions. You can also check the [documentation](https://docs.julialang.org/en/v1/) to learn more about Julia. We need several key packages\n\n``` julia\nusing Pkg\nPkg.add([\"DifferentialEquations\", \n      \"Plots\", \n      \"BenchmarkTools\", \n      \"LaTeXStrings\", \n      \"StaticArrays\"])\n```\n\n-   We already know about [DifferentialEquations.jl](https://docs.sciml.ai/DiffEqDocs/stable/), the powerhouse ODE solver suite with over 200 methods. This gives us access to robust, high-performance solvers specifically designed for stiff systems common in nonlinear optics.\n-   [Plots.jl](https://docs.juliaplots.org/latest/) is Julia's most popular plotting package. Its recipe system leads to `plot(sol)` automatically knowing how to visualize ODE solutions‚Äîperfect for our simulations.\n-   [BenchmarkTools.jl](https://juliaci.github.io/BenchmarkTools.jl/stable/) provide professional-grade benchmarking tools in Julia. Essential for optimizing our simulation performance and understanding computational bottlenecks.\n-   [LaTeXStrings.jl](https://github.com/JuliaStrings/LaTeXStrings.jl) makes it easy to type LaTeX strings in Julia.\n-   [StaticArrays.jl](https://juliaarrays.github.io/StaticArrays.jl/stable/) helps in implementing statically sized arrays in Julia which can lead to performance advantages. More on this will be discussed later.\n\nNow let's import the necessary packages\n\n```{julia}\n#| output: false\nusing DifferentialEquations, Plots, LaTeXStrings, BenchmarkTools\n```\n\n### Coding the Physics\n\nLet's implement our Raman amplifier simulation step by step:\n\n#### Step 1: Define the simulation parameters\n\n```{julia}\n#| output: false\n# ------- Signal parameters -------\nŒªs = 1550.0   # Signal wavelength (nm)  \nPs_0 = 1e-3   # Input signal power (W)       \n\n# ------- Pump parameters -------\nŒªp = 1450.0   # Pump wavelength (nm)\nPp_0 = 2.0      # Input pump power (W)         \n\n# ------- Fiber parameters -------\nŒ±_p = 0.23     # Pump attenuation (dB/km)       \nŒ±_s = 0.19     # Signal attenuation (dB/km)     \ngR = 0.4       # Raman gain efficiency (1/W/km)\nL = 50         # Length of fiber (km)\n```\n\nThese parameters represent a typical telecommunications fiber Raman amplifier. The fiber parameters taken are for a standard single-mode fiber (SMF).\n\n#### Step 2: Set up the ODE system\n\n```{julia}\n#| output: false\nfunction Raman1!(dP, P, a, z)\n    Pp, Ps = P\n    r, Œ±_p, Œ±_s, gR = a\n\n    dP[1] = -Œ±_p * Pp - r * gR * Pp * Ps # dPp/dz\n    dP[2] = -Œ±_s * Ps + gR * Pp * Ps   # dPs/dz\nend\n```\n\nThis function defines our ODE system in the form required by `DifferentialEquations.jl`. The `!` indicates an in-place function that modifies dP directly ‚Äî more efficient for large systems. Here $r$ denotes the ratio of pump to signal frequency $r=\\nu_{p}/\\nu_{s}$\n\n#### Step 3: Configure and solve the ODE system\n\nFirst let's define some convenience functions to convert loss from dB/km to 1/km unit and calculate frequency in THz when wavelength is given in nm.\n\n```{julia}\n#| output: false\n# ------- Convenience functions -------\nconst c = 299792.458;  # speed of light in nm THz\nŒ±_lin(dB::Real) = dB / (10 * log10(exp(1))) # convert loss from dB to linear # <1>\nget_ŒΩ(Œª::Real) = c / Œª # get frequency (THz) from wavelength (nm)                      # <1>\nto_dBm(P::Real) = 10 * log10(P * 1e3) # convert power from Watt to dBm # <1>\n```\n\n1.  By appending `::Real` we are saying the function can take only real numbers like integers, floats, fractions ...\n\nNow we configure the system and solve the ODE.\n\n```{julia}\n#| output: false\n# Initial conditions and span\nP0 = [Pp_0, Ps_0]\nzspan = (0.0, L)\n\n# parameters\na = (get_ŒΩ(Œªp)/get_ŒΩ(Œªs), Œ±_lin(Œ±_p), Œ±_lin(Œ±_s), gR) \n\n# create and solve ode problem\nprob = ODEProblem(Raman1!, P0, zspan, a) # creating the ODE problem\nsol = solve(prob,Tsit5(), saveat=L/1000) # solving the ODE problem\n```\n\nWe use `Tsit5()`, a high-quality Runge-Kutta method that's excellent for non-stiff problems. The `saveat` option ensures we get solutions at regular intervals for smooth plotting.\n\n#### Step 4: Visualize the results\n\n```{julia}\n#| label: fig-Raman1\n#| fig-cap: Power evolution of pump and signal along the fiber length.\nplot(sol.t, [to_dBm.(sol[1,:]), to_dBm.(sol[2,:])],\n    linewidth = 2,\n    xaxis=\"Length (km)\",\n    yaxis=\"Power (dBm)\",\n    label =[L\"P_p\" L\"P_s\"],\n    legendfontsize=14,\n    legend=:right,\n    margin=10Plots.mm)\n```\n\nWith this, we‚Äôve successfully simulated a Raman fiber amplifier using Julia. A signal at 1550 nm traveling in a standard SMF gets amplified over the length of the fiber due to Raman scattering. We just had to input 2 W of pump power at 1450 nm alongside the signal to achieve this effect.\n\n## üìä Benchmarking\n\nNow that we‚Äôve built a working simulation of a Raman fiber amplifier, it‚Äôs time to evaluate how efficiently it runs. After all, one of the key reasons for choosing Julia is its reputation for high-performance scientific computing.\n\nJulia provides a simple macro, `@time`, which gives a quick estimate of execution time. However, for more rigorous benchmarking, especially when comparing performance across implementations, we turn to the `BenchmarkTools.jl` package. It offers the `@btime` macro, which runs the code multiple times and reports the minimum execution time along with memory allocations.\n\nLet‚Äôs benchmark our solver:\n\n```{julia}\n@btime solve(prob,Tsit5(), save_everystep = false); #<1>\n```\n\n1.  We just want memory allocations done for solving the ODE and not for saving the values, hence `save_everystep = false`\n\nThis result tells us that in executing the code in executing the code `solve(prob,Tsit5(), save_everystep = false)`: - It took about 16 Œºs - It performs 85 heap allocations, consuming about 4.59 KiB of memory.\n\nHeap allocations refer to memory dynamically allocated during runtime. While necessary, excessive allocations can slow down performance. More on heap allocations can be found [here](https://docs.julialang.org/en/v1/manual/performance-tips/) and [here](https://book.sciml.ai/notes/02-Optimizing_Serial_Code/). Fortunately, our current implementation is already quite efficient.\n\n### Why this code runs fast?\n\nAchieving this level of performance isn‚Äôt just about using Julia‚Äîit‚Äôs also about writing optimized code. In writing the code here, I have followed the guidelines of [Code Optimization for Differential Equations](https://docs.sciml.ai/DiffEqDocs/stable/tutorials/faster_ode_example/). For an ODE solver, most of the time will be spent inside the function we are trying to solve. Here‚Äôs what I did to ensure our solver spends minimal time inside the ODE function.:\n\n-   The core function `Raman1!` is written as an in-place function, which avoids unnecessary memory allocations.\n-   Pre-computed values like the frequency ratio $\\nu_{p}/\\nu_{s}$ and unit conversion of parameters outside the ODE function to reduce overhead.\n-   Additionally, type stability is ensured (Can be checked using `@code_typed Raman1!(similar(P0), P0, zspan, a)`)\n\n## üöÄ Making the code run even faster\n\n### Boosting Performance with StaticArrays\n\nWhile our initial simulation is already efficient, we can push performance even further using `StaticArrays.jl` ‚Äî a Julia package designed for small, fixed-size arrays that are allocated on the stack rather than the heap. In Julia, regular arrays are heap-allocated, which means they involve dynamic memory management. For small arrays (like our 2-element power vector), this can be inefficient. Stack-allocated and immutable **StaticArrays** reduces heap allocations and speeds up computation.\n\nTo use StaticArrays, we need to make a few changes:\n\n1.  Use `SA[]` instead of regular array constructors\n    -   `SA[]` creates a `SVector`, a statically sized vector.\n    -   Example: `SA[dPp, dPs]` returns a 2-element static vector.\n2.  Switch to an out-of-place function.\n    -   Our original function `Raman1!` was in-place, meaning it modified an existing array.\n    -   StaticArrays are immutable, so we return a new array instead‚Äîthis is called an out-of-place function.\n\nHere's the updated code:\n\n```{julia}\nusing StaticArrays \nfunction Raman1_Static(P, a, z)\n    r, Œ±_p, Œ±_s, gR = a\n    Pp, Ps = P\n\n    dPp = -Œ±_p * Pp - r * gR * Pp * Ps # dPp/dz\n    dPs = -Œ±_s * Ps + gR * Pp * Ps   # dPs/dz\n    return SA[dPp, dPs]\nend\n\nP0 = SA[Pp_0, Ps_0];  # (pump , signal)power \na = SA[get_ŒΩ(Œªp)/get_ŒΩ(Œªs), Œ±_lin(Œ±_p), Œ±_lin(Œ±_s), gR];\n\nprob = ODEProblem(Raman1_Static, P0, zspan, a);\n@btime solve(prob, Tsit5(), save_everystep=false);\n```\n\nThat‚Äôs a 3x speedup with significantly fewer allocations ‚Äî an impressive gain for such a small change. This is especially valuable when scaling up simulations or running them repeatedly.\n\n## ‚ú® Bonus: Benchmarking with Python\n\nLets see how does out Julia code stack up against Python ‚Äî the scientist‚Äôs standby ‚Äî for a task like a Raman fiber amplifier simulation using standard ODE solvers? Below is a self-contained Python version (using NumPy and SciPy) ‚Äî the same ODE and parameters.\n\n:::: {.callout-note icon=\"false\" collapse=\"true\" title=\"Python code\"}\n::: {#lst-pythoncode lst-cap=\"\"}\n``` python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\n# System ODE\ndef Raman1(z, P, freq_ratio, alpha_p, alpha_s, gR):\n  Pp, Ps = P\n  dPp_dz = -gR * Pp * Ps - alpha_p * Pp\n  dPs_dz = gR * freq_ratio * Pp * Ps - alpha_s * Ps\n  return [dPp_dz, dPs_dz]\n\n# Solve ODE\nsol = solve_ivp(Raman1, (0,50.0) , [2.0, 1e-3],\n              args=(1550.0/1450.0, 0.23/4.343, 0.19/4.343, 0.4))\n```\n:::\n::::\n\nWe use the [PythonCall.jl](https://juliapy.github.io/PythonCall.jl/stable/) package to run native Python code from Julia. Here, we define our Python code as a string in Julia using the syntax `py\"\"\"<python code here>\"\"\"`. We wrap the above Python [code @lst-pythoncode] within a python function returning the result of `sol` (ODE solved in python) as a dictionary that can be passed to Julia.\n\n```{julia}\n#| code-fold: true\nusing PyCall\n# python code as a string\npy\"\"\"\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef raman_amp_python():\n  # System ODE\n  def Raman1(z, P, freq_ratio, alpha_p, alpha_s, gR):\n      Pp, Ps = P\n      dPp_dz = -gR * Pp * Ps - alpha_p * Pp\n      dPs_dz = gR * freq_ratio * Pp * Ps - alpha_s * Ps\n      return [dPp_dz, dPs_dz]\n\n  # Solve ODE\n  sol = solve_ivp(Raman1, (0,50.0) , [2.0, 1e-3],\n                  args=(1550.0/1450.0, 0.23/4.343, 0.19/4.343, 0.4))\n  return {\n        \"z\": sol.t,\n        \"Ps\": sol.y[0],\n        \"Pp\": sol.y[1]\n    }\n\"\"\"\n# Calling the Python code from Julia\npy_raman_amp = py\"raman_amp_python\"\nresult = py_raman_amp();\n```\n\nOnce we have successfully solved the ODE in python by calling it from Julia, now let's benchmark it.\n\n```{julia}\n@btime py_raman_amp();\n```\n\nThe python implementation of the same code is 120x slower than our first Julia implementation and more than 350x slower than out StaticArray based Julia code.\n\n|         Code         | Time taken | Allocations | Memory used |\n|:--------------------:|:----------:|:-----------:|:-----------:|\n|    Julia (Basic)     |  \\~16 Œºs   |     85      |  4.59 KiB   |\n| Julia (StaticArrays) |  \\~5.5 Œºs  |     25      |  1.92 KiB   |\n|        Python        |  \\~2.2 ms  |     126     |  5.37 KiB   |\n\n: Comparision of benchmark results\n\n## Conclusion\n\nIn this post, we looked at how to simulate Raman amplifiers using Julia. We then tried to optimize the code for performance and finally compared our Julia code with the Python implementation.\n\nHere, I have simulated the co-pumped and single Raman shift based amplifier. In subsequent posts, I‚Äôll explore multiple Raman shifts and also counter-pumped case.","srcMarkdownNoYaml":"\n\n## üöÄ What You‚Äôll Learn in This Post\n\n-   A quick primer on **Raman fiber amplifiers** and their role in modern **optical communication systems**.\n-   The **physics and equations** behind **Raman gain** and **signal-pump interactions**.\n-   How to **simulate Raman amplifiers** using **Julia programming language** for **high-performance computing**.\n-   Techniques to **optimize Julia code** using **StaticArrays**, **in-place operations**, and **memory-efficient design**.\n-   Visual plot of **power evolution** along the fiber length.\n-   Benchmarking results comparing **Julia vs Python** for scientific simulations.\n-   Access to **Julia code snippets**, explanations, and performance tips for hands-on learning.\n\n## ü§î What is Raman fiber amplifier, and why simulate it?\n\nA **Raman fiber amplifier (RFA)** uses the Raman scattering effect to amplify optical signals directly within the transmission fiber itself. Unlike traditional fiber amplifiers that require special dopants in optical fiber, Raman scattering can turn any ordinary optical fiber into an amplifier, making RFAs incredibly versatile for telecommunications systems.\n\nHere are some of the points why RFAs are revolutionary:\n\n-   **Wavelength flexibility**: Raman amplification can be done at any wavelength and in any conventional optical fiber.\n-   **Broad bandwidth**: Leads to amplification of large range of wavelengths, essential for dense wavelength division multiplexing (WDM) systems\n-   **Distributed amplification**: The entire fiber becomes the gain medium, providing amplification along the transmission path\n\nRFAs are now commonly used in long-haul communication systems that are designed to operate over thousands of kilometers. Simulating these RFAs is crucial, as complex nonlinear interactions between pump and signal beams makes analytical solutions impossible for a practical situation. By modeling the coupled ordinary differential equations (ODE) that govern Raman amplification, we can optimize several aspects of the amplifier design such as pump parameters, fiber lengths, and design systems before performing an expensive experimental validation. Also simulation provides us a handy tool to understand the workings of a system by varying only the desired parameter, which is not possible in a practical system. Now let's discuss why Julia programming language is a good choice to do the simulation.\n\n## ü§∑‚Äç‚ôÇÔ∏è Why Julia?\n\nJulia is uniquely positioned for scientific simulations like RFAs. Here are some of the reasons:\n\n-   **Performance**: With Julia, one can achieve C-like speeds while having Python-like readability. For iterative ODE solving required in RFA simulations, this can lead to dramatically faster computation times‚Äîoften 10-100x faster than Python\n-   **Simplicity**: The syntax is intuitive for scientists and engineers. For example, one can write `dP‚Çö = gR*P‚Çö*P‚Çõ - Œ±‚Çõ*P‚Çõ` and it looks exactly like the mathematical equation\n-   **Rich Ecosystem**: [DifferentialEquations.jl](https://docs.sciml.ai/DiffEqDocs/stable/) is, IMO, the most sophisticated ODE solver suite in any language, with over 200 methods for solving variety of differential equations, with a focus on speed and flexibility\n-   **Scientific Focus**: Julia was designed from the ground up for numerical and scientific computing. It handles the \"two-language problem\" where one develop the prototype in a high-level language (eg: Python, MATLAB) but implement the main computation in a low-level language for performance (C, FORTRAN).\n\n## üìò Basic theory Refresher\n\nNow before we dive deeper into writing the codes, lets discuss the theory a bit.\n\n### Brief overview of Raman amplification\n\nWhen light interacts with molecular vibrations in glass, there can be transfer of energy between different wavelengths. This is known as **Raman scattering**. Imagine a high energy photon (pump) that collide with vibrating fiber molecules (phonons), giving up some of their energy becoming a lower energy photon (Stokes) at lower frequency or longer wavelength (The pump photons can also receive energy from phonons leading to higher frequency anti-Stokes photons, but this is usually a weak process at room temperatures). If a signal photon is already present at Stokes frequency, it can lead to **stimulated Raman scattering** leading to amplification of the signal wave at Stokes frequency (and thus Raman gain).\n\n### The power-balance equation\n\nThe heart of Raman amplifier simulation lies in two coupled ordinary differential equations (ODEs) that describe how pump and signal (Stokes) powers evolve along the fiber [@agrawal2013; @headley2005] $$\n\\begin{align} \\\\\n&\\mathbf{Signal\\ equation:}\n&\\frac{dP_{s}}{dz}&= g_{R}P_{p}P_{s} - \\alpha_{s}P_{s} \\\\\n&\\mathbf{Pump\\ equation:}\n&\\frac{dP_{p}}{dz}&= -\\frac{\\nu_{p}}{\\nu_{s} }g_{R}P_{p}P_{s} - \\alpha_{p}P_{p}\n\\end{align}\n$$ {#eq-power-balance1} where:\n\n-   $P_{s}$ and $P_{p}$ are signal and pump powers that are a function of position $z$\n-   $g_{R}$ is the Raman gain efficiency\n-   $\\alpha_{s}$ and $\\alpha_{p}$ are signal and pump attenuation coefficients\n-   $\\nu_{s}$ and $\\nu_{p}$ are signal and pump frequencies\n\n![Diagram illustrating the power-balance equation](power%20balance.png){#fig-power-balance .lightbox fig-align=\"center\" width=\"80%\"}\n\nThe $g_{R}P_{p}P_{s}$ term is the power transfer from pump to signal due to stimulated Raman scattering and the term $-\\frac{\\nu_{p}}{\\nu_{s} }g_{R}P_{p}P_{s}$ represents the power loss in the pump as it is transferred to signal. The reason of the $\\nu_{p}/\\nu_{s}$ term is due to photon number conservation (in absence of loss) [@agrawal2013].\n\nThe power-balance equations describes the initial pump and signal power $P_{p}(0)$ and $P_{s}(0)$ evolves along the fiber length $L$.\n\n#### Key assumptions\n\nThe above equations are derived with these assumptions\n\n-   **CW or quasi-CW regime**: both pump and signal assumed to be close to continuous-wave(CW) and so no time dependence is considered, valid assumption in most telecommunications applications.\n-   **Single-mode fiber**: both pump and signal waves are in the fundamental mode of fiber, appropriate for standard telecom fibers\n-   **Co-propagating**: both pump and signal waves travel in the same direction, valid in most cases and simple to begin with simulation compared to the counter-propagating case.\n-   **No dispersion**: the fiber has same mode solutions at both pump and signal waves, an assumption we can easily relax, considered initially only to simplify the simulation.\n\nThe beauty of these equations, under the given assumptions, lies in their simplicity ‚Äî yet they capture the essential physics of energy transfer, amplification, and loss in fiber Raman amplifiers.\n\n## üß™ Performing the Simulation in Julia\n\n### Setting up\n\nFirst, if you don‚Äôt have Julia installed, then download and install [Julia programming language](https://julialang.org/). Follow the [installing Julia](https://julialang.org/install/) instructions. You can also check the [documentation](https://docs.julialang.org/en/v1/) to learn more about Julia. We need several key packages\n\n``` julia\nusing Pkg\nPkg.add([\"DifferentialEquations\", \n      \"Plots\", \n      \"BenchmarkTools\", \n      \"LaTeXStrings\", \n      \"StaticArrays\"])\n```\n\n-   We already know about [DifferentialEquations.jl](https://docs.sciml.ai/DiffEqDocs/stable/), the powerhouse ODE solver suite with over 200 methods. This gives us access to robust, high-performance solvers specifically designed for stiff systems common in nonlinear optics.\n-   [Plots.jl](https://docs.juliaplots.org/latest/) is Julia's most popular plotting package. Its recipe system leads to `plot(sol)` automatically knowing how to visualize ODE solutions‚Äîperfect for our simulations.\n-   [BenchmarkTools.jl](https://juliaci.github.io/BenchmarkTools.jl/stable/) provide professional-grade benchmarking tools in Julia. Essential for optimizing our simulation performance and understanding computational bottlenecks.\n-   [LaTeXStrings.jl](https://github.com/JuliaStrings/LaTeXStrings.jl) makes it easy to type LaTeX strings in Julia.\n-   [StaticArrays.jl](https://juliaarrays.github.io/StaticArrays.jl/stable/) helps in implementing statically sized arrays in Julia which can lead to performance advantages. More on this will be discussed later.\n\nNow let's import the necessary packages\n\n```{julia}\n#| output: false\nusing DifferentialEquations, Plots, LaTeXStrings, BenchmarkTools\n```\n\n### Coding the Physics\n\nLet's implement our Raman amplifier simulation step by step:\n\n#### Step 1: Define the simulation parameters\n\n```{julia}\n#| output: false\n# ------- Signal parameters -------\nŒªs = 1550.0   # Signal wavelength (nm)  \nPs_0 = 1e-3   # Input signal power (W)       \n\n# ------- Pump parameters -------\nŒªp = 1450.0   # Pump wavelength (nm)\nPp_0 = 2.0      # Input pump power (W)         \n\n# ------- Fiber parameters -------\nŒ±_p = 0.23     # Pump attenuation (dB/km)       \nŒ±_s = 0.19     # Signal attenuation (dB/km)     \ngR = 0.4       # Raman gain efficiency (1/W/km)\nL = 50         # Length of fiber (km)\n```\n\nThese parameters represent a typical telecommunications fiber Raman amplifier. The fiber parameters taken are for a standard single-mode fiber (SMF).\n\n#### Step 2: Set up the ODE system\n\n```{julia}\n#| output: false\nfunction Raman1!(dP, P, a, z)\n    Pp, Ps = P\n    r, Œ±_p, Œ±_s, gR = a\n\n    dP[1] = -Œ±_p * Pp - r * gR * Pp * Ps # dPp/dz\n    dP[2] = -Œ±_s * Ps + gR * Pp * Ps   # dPs/dz\nend\n```\n\nThis function defines our ODE system in the form required by `DifferentialEquations.jl`. The `!` indicates an in-place function that modifies dP directly ‚Äî more efficient for large systems. Here $r$ denotes the ratio of pump to signal frequency $r=\\nu_{p}/\\nu_{s}$\n\n#### Step 3: Configure and solve the ODE system\n\nFirst let's define some convenience functions to convert loss from dB/km to 1/km unit and calculate frequency in THz when wavelength is given in nm.\n\n```{julia}\n#| output: false\n# ------- Convenience functions -------\nconst c = 299792.458;  # speed of light in nm THz\nŒ±_lin(dB::Real) = dB / (10 * log10(exp(1))) # convert loss from dB to linear # <1>\nget_ŒΩ(Œª::Real) = c / Œª # get frequency (THz) from wavelength (nm)                      # <1>\nto_dBm(P::Real) = 10 * log10(P * 1e3) # convert power from Watt to dBm # <1>\n```\n\n1.  By appending `::Real` we are saying the function can take only real numbers like integers, floats, fractions ...\n\nNow we configure the system and solve the ODE.\n\n```{julia}\n#| output: false\n# Initial conditions and span\nP0 = [Pp_0, Ps_0]\nzspan = (0.0, L)\n\n# parameters\na = (get_ŒΩ(Œªp)/get_ŒΩ(Œªs), Œ±_lin(Œ±_p), Œ±_lin(Œ±_s), gR) \n\n# create and solve ode problem\nprob = ODEProblem(Raman1!, P0, zspan, a) # creating the ODE problem\nsol = solve(prob,Tsit5(), saveat=L/1000) # solving the ODE problem\n```\n\nWe use `Tsit5()`, a high-quality Runge-Kutta method that's excellent for non-stiff problems. The `saveat` option ensures we get solutions at regular intervals for smooth plotting.\n\n#### Step 4: Visualize the results\n\n```{julia}\n#| label: fig-Raman1\n#| fig-cap: Power evolution of pump and signal along the fiber length.\nplot(sol.t, [to_dBm.(sol[1,:]), to_dBm.(sol[2,:])],\n    linewidth = 2,\n    xaxis=\"Length (km)\",\n    yaxis=\"Power (dBm)\",\n    label =[L\"P_p\" L\"P_s\"],\n    legendfontsize=14,\n    legend=:right,\n    margin=10Plots.mm)\n```\n\nWith this, we‚Äôve successfully simulated a Raman fiber amplifier using Julia. A signal at 1550 nm traveling in a standard SMF gets amplified over the length of the fiber due to Raman scattering. We just had to input 2 W of pump power at 1450 nm alongside the signal to achieve this effect.\n\n## üìä Benchmarking\n\nNow that we‚Äôve built a working simulation of a Raman fiber amplifier, it‚Äôs time to evaluate how efficiently it runs. After all, one of the key reasons for choosing Julia is its reputation for high-performance scientific computing.\n\nJulia provides a simple macro, `@time`, which gives a quick estimate of execution time. However, for more rigorous benchmarking, especially when comparing performance across implementations, we turn to the `BenchmarkTools.jl` package. It offers the `@btime` macro, which runs the code multiple times and reports the minimum execution time along with memory allocations.\n\nLet‚Äôs benchmark our solver:\n\n```{julia}\n@btime solve(prob,Tsit5(), save_everystep = false); #<1>\n```\n\n1.  We just want memory allocations done for solving the ODE and not for saving the values, hence `save_everystep = false`\n\nThis result tells us that in executing the code in executing the code `solve(prob,Tsit5(), save_everystep = false)`: - It took about 16 Œºs - It performs 85 heap allocations, consuming about 4.59 KiB of memory.\n\nHeap allocations refer to memory dynamically allocated during runtime. While necessary, excessive allocations can slow down performance. More on heap allocations can be found [here](https://docs.julialang.org/en/v1/manual/performance-tips/) and [here](https://book.sciml.ai/notes/02-Optimizing_Serial_Code/). Fortunately, our current implementation is already quite efficient.\n\n### Why this code runs fast?\n\nAchieving this level of performance isn‚Äôt just about using Julia‚Äîit‚Äôs also about writing optimized code. In writing the code here, I have followed the guidelines of [Code Optimization for Differential Equations](https://docs.sciml.ai/DiffEqDocs/stable/tutorials/faster_ode_example/). For an ODE solver, most of the time will be spent inside the function we are trying to solve. Here‚Äôs what I did to ensure our solver spends minimal time inside the ODE function.:\n\n-   The core function `Raman1!` is written as an in-place function, which avoids unnecessary memory allocations.\n-   Pre-computed values like the frequency ratio $\\nu_{p}/\\nu_{s}$ and unit conversion of parameters outside the ODE function to reduce overhead.\n-   Additionally, type stability is ensured (Can be checked using `@code_typed Raman1!(similar(P0), P0, zspan, a)`)\n\n## üöÄ Making the code run even faster\n\n### Boosting Performance with StaticArrays\n\nWhile our initial simulation is already efficient, we can push performance even further using `StaticArrays.jl` ‚Äî a Julia package designed for small, fixed-size arrays that are allocated on the stack rather than the heap. In Julia, regular arrays are heap-allocated, which means they involve dynamic memory management. For small arrays (like our 2-element power vector), this can be inefficient. Stack-allocated and immutable **StaticArrays** reduces heap allocations and speeds up computation.\n\nTo use StaticArrays, we need to make a few changes:\n\n1.  Use `SA[]` instead of regular array constructors\n    -   `SA[]` creates a `SVector`, a statically sized vector.\n    -   Example: `SA[dPp, dPs]` returns a 2-element static vector.\n2.  Switch to an out-of-place function.\n    -   Our original function `Raman1!` was in-place, meaning it modified an existing array.\n    -   StaticArrays are immutable, so we return a new array instead‚Äîthis is called an out-of-place function.\n\nHere's the updated code:\n\n```{julia}\nusing StaticArrays \nfunction Raman1_Static(P, a, z)\n    r, Œ±_p, Œ±_s, gR = a\n    Pp, Ps = P\n\n    dPp = -Œ±_p * Pp - r * gR * Pp * Ps # dPp/dz\n    dPs = -Œ±_s * Ps + gR * Pp * Ps   # dPs/dz\n    return SA[dPp, dPs]\nend\n\nP0 = SA[Pp_0, Ps_0];  # (pump , signal)power \na = SA[get_ŒΩ(Œªp)/get_ŒΩ(Œªs), Œ±_lin(Œ±_p), Œ±_lin(Œ±_s), gR];\n\nprob = ODEProblem(Raman1_Static, P0, zspan, a);\n@btime solve(prob, Tsit5(), save_everystep=false);\n```\n\nThat‚Äôs a 3x speedup with significantly fewer allocations ‚Äî an impressive gain for such a small change. This is especially valuable when scaling up simulations or running them repeatedly.\n\n## ‚ú® Bonus: Benchmarking with Python\n\nLets see how does out Julia code stack up against Python ‚Äî the scientist‚Äôs standby ‚Äî for a task like a Raman fiber amplifier simulation using standard ODE solvers? Below is a self-contained Python version (using NumPy and SciPy) ‚Äî the same ODE and parameters.\n\n:::: {.callout-note icon=\"false\" collapse=\"true\" title=\"Python code\"}\n::: {#lst-pythoncode lst-cap=\"\"}\n``` python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\n# System ODE\ndef Raman1(z, P, freq_ratio, alpha_p, alpha_s, gR):\n  Pp, Ps = P\n  dPp_dz = -gR * Pp * Ps - alpha_p * Pp\n  dPs_dz = gR * freq_ratio * Pp * Ps - alpha_s * Ps\n  return [dPp_dz, dPs_dz]\n\n# Solve ODE\nsol = solve_ivp(Raman1, (0,50.0) , [2.0, 1e-3],\n              args=(1550.0/1450.0, 0.23/4.343, 0.19/4.343, 0.4))\n```\n:::\n::::\n\nWe use the [PythonCall.jl](https://juliapy.github.io/PythonCall.jl/stable/) package to run native Python code from Julia. Here, we define our Python code as a string in Julia using the syntax `py\"\"\"<python code here>\"\"\"`. We wrap the above Python [code @lst-pythoncode] within a python function returning the result of `sol` (ODE solved in python) as a dictionary that can be passed to Julia.\n\n```{julia}\n#| code-fold: true\nusing PyCall\n# python code as a string\npy\"\"\"\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef raman_amp_python():\n  # System ODE\n  def Raman1(z, P, freq_ratio, alpha_p, alpha_s, gR):\n      Pp, Ps = P\n      dPp_dz = -gR * Pp * Ps - alpha_p * Pp\n      dPs_dz = gR * freq_ratio * Pp * Ps - alpha_s * Ps\n      return [dPp_dz, dPs_dz]\n\n  # Solve ODE\n  sol = solve_ivp(Raman1, (0,50.0) , [2.0, 1e-3],\n                  args=(1550.0/1450.0, 0.23/4.343, 0.19/4.343, 0.4))\n  return {\n        \"z\": sol.t,\n        \"Ps\": sol.y[0],\n        \"Pp\": sol.y[1]\n    }\n\"\"\"\n# Calling the Python code from Julia\npy_raman_amp = py\"raman_amp_python\"\nresult = py_raman_amp();\n```\n\nOnce we have successfully solved the ODE in python by calling it from Julia, now let's benchmark it.\n\n```{julia}\n@btime py_raman_amp();\n```\n\nThe python implementation of the same code is 120x slower than our first Julia implementation and more than 350x slower than out StaticArray based Julia code.\n\n|         Code         | Time taken | Allocations | Memory used |\n|:--------------------:|:----------:|:-----------:|:-----------:|\n|    Julia (Basic)     |  \\~16 Œºs   |     85      |  4.59 KiB   |\n| Julia (StaticArrays) |  \\~5.5 Œºs  |     25      |  1.92 KiB   |\n|        Python        |  \\~2.2 ms  |     126     |  5.37 KiB   |\n\n: Comparision of benchmark results\n\n## Conclusion\n\nIn this post, we looked at how to simulate Raman amplifiers using Julia. We then tried to optimize the code for performance and finally compared our Julia code with the Python implementation.\n\nHere, I have simulated the co-pumped and single Raman shift based amplifier. In subsequent posts, I‚Äôll explore multiple Raman shifts and also counter-pumped case."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"julia"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"highlight-style":"monokai","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["darkly","../../custom.scss"],"page-layout":"full","csl":"../../ieee.csl","title-block-banner":true,"title":"Simulating Raman Fiber Amplifiers in Julia: From Theory to High-Performance Code","author":"Sarthak Dash","date":"2025-08-09","categories":["Raman","Julia"],"image":"image.jpg","code-annotations":"hover","bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}